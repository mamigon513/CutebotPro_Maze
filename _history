{"entries":[],"snapshots":[{"timestamp":1744342132898,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lQw$c[T`/{(QyGxiF(]Q\">strip</variable><variable id=\".CNPXv0/=P:%bCUCr=#e\">Speed</variable><variable id=\"cwfV_PB$Pl1kR:)L/w/S\">time</variable><variable id=\"^}7#7,:X$sER#6J^K4qw\">range</variable></variables></xml>","main.ts":"","README.md":"\n> Open this page at [https://sstidh.github.io/maze_code/](https://sstidh.github.io/maze_code/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/sstidh/maze_code** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/sstidh/maze_code** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","main.py":"## MAGNET DETECTION\n#magnet checking function\n\ndef magnet_detect():\n    mag = 0\n    force = abs(input.magnetic_force(Dimension.Y))\n    if force >= 500:\n        mag = 1\n         # turn headlights green\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n    return mag\n\n## BACKGROUND MUSIC\ndef missionImpossibleMusic(bpm):\n    music.play(music.string_playable(\"G4 G4 - G4 G4 G4 Bb4 Bb4\", bpm), \n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"C5 C5 G4 G4 - G4 G4 G4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"Fb4 Fb4 F4 F4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"G4 G4 - G4 G4 G4 Bb4 Bb4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"C5 C5 G4 G4 - G4 G4 G4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"Fb4 Fb4 F4 F4\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"A6 G6 D5 D5 D5 D5 D5 D5 - -\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"A6 G6 Db5 Db5 Db5 Db5 Db5 Db5 - -\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"A6 G6 C5 C5 C5 C5 C5 C5 - -\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n    music.play(music.string_playable(\"Bb4 C5 - -\", bpm),\n        music.PlaybackMode.UNTIL_DONE)\n\ndef onIn_background():\n    missionImpossibleMusic(350)\n    pass\n#control.in_background(onIn_background)\n\n\n## DIRECTION CORRECTION FUNCTIONS\ndef straighten_to_line():\n    #keep counter to break while loop\n    count = 0\n\n    CutebotPro.pwm_cruise_control(20, 20)\n    basic.pause(50)\n\n    # turn on headlights(pink = 247, 25, 236)\n    CutebotPro.single_headlights(CutebotProRGBLight.RGBL, 247, 25, 236)\n    CutebotPro.single_headlights(CutebotProRGBLight.RGBR, 247, 25, 236)\n    #keep turning till we are straight\n    while(abs(CutebotPro.get_offset()) > 0 and count < 100):\n        # update count of while loop iterations\n        count = count + 1\n        #get offset\n        error = CutebotPro.get_offset()\n        # set turn speed\n        speed = 30 + (error/3000)*70\n        # turn right\n        if error > 0:\n            #turn on right headlight(blue = 51, 255, 252)\n            CutebotPro.single_headlights(CutebotProRGBLight.RGBR, 51, 255, 252)\n            CutebotPro.pwm_cruise_control(speed, -1*speed)\n            basic.pause(10)\n            # turn off headlights\n            CutebotPro.turn_off_all_headlights()\n        # turn left\n        if error < 0:\n            #turn on left headlight(blue = 51, 255, 252)\n            CutebotPro.single_headlights(CutebotProRGBLight.RGBL, 51, 255, 252)\n            CutebotPro.pwm_cruise_control(-1*speed, speed)\n            basic.pause(10)\n            # turn off headlights\n            CutebotPro.turn_off_all_headlights()\n\n        CutebotPro.pwm_cruise_control(0, 0)\n        basic.pause(20)\n\n    # turn off headlights\n    CutebotPro.turn_off_all_headlights()\n\ndef detect_line():\n    # get the line tracking offset\n    error = CutebotPro.get_offset()\n    line = 0\n    # detects black line\n    if abs(error) < 3000:\n        CutebotPro.pwm_cruise_control(0, 0)\n        straighten_to_line()\n        line = 1\n    return line\n\n## LINE FOLLOWING\n#set variables\nlwheel = 20\nrwheel = 20\nerror = 0\nmaxturnspeed = 50\n\n# set starting speed\nCutebotPro.pwm_cruise_control(lwheel, rwheel)\nbasic.pause(50)\n \n#turns for line following\ndef turn_r():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel + (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel - (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)\ndef turn_l():\n    global lwheel, rwheel, maxturnspeed\n    lwheel = lwheel - (abs(error)/3000)*maxturnspeed\n    rwheel = rwheel + (abs(error)/3000)*maxturnspeed\n     # Set the change\n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n     #delay 0.05 sec\n     #delay 0.01 sec\n    basic.pause(10)    \n\ndef follow_line():\n    global lwheel, rwheel, error\n \n    # get the line offset\n    error = CutebotPro.get_offset()\n \n    # make the left side of line the center\n    # error = error + 1000\n \n    # if detects no line\n    if abs(error) == 3000:\n        lwheel = 0\n        rwheel = 0\n \n         #turn on both headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n     # if detects a big line\n     #### Intersection ####\n     # if detects a big line (error is less than 100)\n    if abs(error) < 100:\n        if error > 0: # robot is to the left of intersection (make a big right turn)\n            error = 3000/error\n            turn_r()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xffff00)\n        elif error < 0: # robot is to the right of intersection (make a big left turn)\n            error = 3000/error\n            turn_l()\n            basic.pause(100)\n             #yellow light\n            CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xffff00)\n\n     # too far left\n    if error > 0:\n        turn_r()\n         # turn on left headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n     # too far right\n    if error < 0:\n        turn_l()\n         #turn on right headlight (red)\n        CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n \n \n    # reset speed and headlights\n    CutebotPro.turn_off_all_headlights()\n    lwheel = 10\n    rwheel = 10\n \n    CutebotPro.pwm_cruise_control(lwheel, rwheel)\n    basic.pause(5)\n \n\n#Run line follow till magnet detected then stop\n\nwhile (magnet_detect() == 0):\n   follow_line()\n#stop robot\nCutebotPro.pwm_cruise_control(0, 0)\nbasic.pause(100)\nCutebotPro.turn_off_all_headlights()\n\n\n## START MAZE\n#CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 15.35, CutebotProDistanceUnits.CM)\n#basic.pause(1000)\n\n\n#originate maze matrix and depth first search variables\n#N = 5\n#M = 6\n#field = []\n#for j in range(N):\n    #row = []\n    #for i in range(M):\n        #row.append(0)\n    #field.append(row)\n\ngrid_type: List[number] = [] #Java script, defines array as an integer array\nintersection: List[number] = []\n\n\n#originate empty path taken\npath: List[number] = [] \nfirst_move_done = False\nmaze_exit = False\nmagnet_count = 1\n\n#functions for turning and moving forward\ndef check_distance():\n    return CutebotPro.ultrasonic(SonarUnit.CENTIMETERS)\n\ndef turn_left():\n    CutebotPro.trolley_steering(CutebotProTurn.LEFT_IN_PLACE, 90)\n    basic.pause(100)\n\ndef turn_right():\n    CutebotPro.trolley_steering(CutebotProTurn.RIGHT_IN_PLACE, 90)\n    basic.pause(100)\n\n\ndef move_forward():\n    CutebotPro.pwm_cruise_control(20, 20)\n    line_found = 0\n    while line_found == 0:\n        line_found = detect_line()\n    CutebotPro.distance_running(CutebotProOrientation.ADVANCE, 20, CutebotProDistanceUnits.CM)\n    basic.pause(100)\n\nmove_forward()\n\n\n#maze navigation before exit magnet is located \nwhile magnet_count < 3:\n    mag = magnet_detect()\n    #magnet found\n    if mag == 1:\n       magnet_count+=1\n       #magnet inside maze located\n       if magnet_count == 2:\n           path.append(4)\n    \n    #end mazed navigation\n    if magnet_count == 3:\n        maze_exit = True\n\n    #continue maze navigation\n    else:   \n    # Look left\n        turn_left()\n        left = check_distance()\n        basic.pause(100)\n        if left > 16:\n            move_forward()\n            path.append(2)\n        else:\n        # Look forward\n            turn_right()\n            front = check_distance()\n            basic.pause(100)\n            if front > 16:\n                move_forward()\n                path.append(1)\n            else:\n            # Look right\n                turn_right()\n                right = check_distance()\n                basic.pause(100)\n                if right > 16:\n                    move_forward()\n                    path.append(3)\n                else:\n                    # Dead end\n                    turn_right()\n                    move_forward()\n                    path.append(0)\n\n            \n\n## TRANSMISSION\ndef on_button_pressed_a():\n    basic.pause(1000)\n    for i in range(len(path)):\n        radio.send_value(\"step\", path[i])\n        basic.pause(700)  # Small delay for good transmission\ninput.on_button_pressed(Button.A, on_button_pressed_a)\nradio.set_group(1)\n\n## CELEBRATE\ndef total(bpm):\n   CutebotPro.pwm_cruise_control(0,100)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff0000)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x7f00ff)\n   music.play(music.string_playable(\"C\", bpm),\n                music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff8000)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x007fff)\n   music.play(music.string_playable(\"C\", bpm),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xffff00)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n   music.play(music.string_playable(\"C\", bpm),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.pwm_cruise_control(100,0)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xffff00)\n   music.play(music.string_playable(\"C\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ffff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff8000)\n   music.play(music.string_playable(\"C5\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x007fff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff0000)\n   music.play(music.string_playable(\"F\", bpm),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x7f00ff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff00ff)\n   music.play(music.string_playable(\"F\", bpm),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff00ff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n   CutebotPro.pwm_cruise_control(0,100)\n   music.play(music.string_playable(\"E\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff00ff)\n   CutebotPro.pwm_cruise_control(100,0)\n   music.play(music.string_playable(\"A\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0xff00ff)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0x00ff00)\n   CutebotPro.pwm_cruise_control(0,100)\n   music.play(music.string_playable(\"E\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n   CutebotPro.color_light(CutebotProRGBLight.RGBL, 0x00ff00)\n   CutebotPro.color_light(CutebotProRGBLight.RGBR, 0xff00ff)\n   CutebotPro.pwm_cruise_control(100,0)\n   music.play(music.string_playable(\"A\", bpm*2),\n                    music.PlaybackMode.UNTIL_DONE)\n\n\ntotal(130)\n\n","pxt.json":"{\n    \"name\": \"Cutebot-Pro\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-cutebotpro\": \"github:elecfreaks/pxt-cutebot-pro#v2.1.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"main.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v6.0.8\",\n        \"tag\": \"v6.0.8\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/906fae22ad7170d594c660ce9ca627384dc36148\",\n        \"target\": \"7.0.61\",\n        \"pxt\": \"9.0.6\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"pyprj\"\n}\n","test.ts":"// tests go here; this will not be compiled when this package is used as an extension.\n"}}],"shares":[],"lastSaveTime":1744342132905}